/*
 * Vendor Prefix generator
 */
@mixin prefix($name, $argument...) {
  #{$name}: $argument;
  -webkit-#{$name}: $argument;
  -ms-#{$name}: $argument;
  -moz-#{$name}: $argument;
  -o-#{$name}: $argument;
}
@mixin splitChild($val) {
  &:nth-child(#{$val}n+#{$val}) {
    margin-right: 0;
  }
}
//display flex
@mixin flexbox {
  $flex-prefixes: -webkit-box -moz-box -ms-flexbox -webkit-flex flex;
  @each $flex-prefix in $flex-prefixes {
    display: $flex-prefix;
  }
}
/*
 * a small mixin for easy use of rem with px as fallback
 * usage: @include x-rem(font-size, 14px)
 * usage: @include x-rem(margin, 0 12px 2 1.2)
 * usage: @include x-rem(padding, 1.5 24px)
 *
 * thanks to Eric Meyer for https://github.com/ericam/susy
 * and Hans Christian Reinl for http://drublic.de/blog/rem-fallback-sass-less/
 */
@mixin x-rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $font-size-base: 16px; // should be consistent with your html/body font-size
  $px-values: ();
  $em-values: ();
  $rem-values: ();
  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $em-values: join($em-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $font-size-base;
      $new-em-value: $new-rem-value;
      $px-values: join($px-values, round($value));
      $em-values: join($em-values, #{$new-em-value}em);
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if $value == auto or $value == inherit {
      // auto or inherit - don't add px or rem - from comment under gist
      $px-values: join($px-values, $value);
      $em-values: join($em-values, $value);
      $rem-values: join($rem-values, $value);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size-base));
      $em-values: join($em-values, #{$value}em);
      $rem-values: join($rem-values, #{$value}rem);
    }
  }
  // output the converted rules
  //#{$property}: $px-values;
  //#{$property}: $em-values;
  #{$property}: $rem-values;
}
/*
 * Linear gradient generator. 'start' is top, 'end' is bottom. IE9 support not included using CSS SVG include.
 *
 * Use http://www.colorzilla.com/gradient-editor/ to generate IE9 SVG element
 *
 */
@mixin gradient($start, $end) {
  $backgrounds: $start -moz-linear-gradient(top, $start 0%, $end 100%)
  -webkit-gradient(linear, left top, left bottom, color-stop(0%, $start), color-stop(100%, $end))
  -webkit-linear-gradient(top, $start 0%, $end 100%) -o-linear-gradient(top, $start 0%, $end 100%)
  -o-linear-gradient(top, $start 0%, $end 100%) linear-gradient(to bottom, $start 0%, $end 100%);
  @each $bg in $backgrounds {
    background: $bg;
  }
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$start', endColorstr='$end', GradientType=0); /* IE6-8 */
}
@mixin fixLines($lines,$line-height,$overrideLines: 0,$setMinimumHeight: 0) {
  @if $overrideLines == 0 {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    max-height: $line-height*$lines; /* fallback */
    -webkit-line-clamp: $lines; /* number of lines to show */
    -webkit-box-orient: vertical;
    @if $setMinimumHeight != 0 {
      min-height: $line-height*$lines;
    }
  } @else {
    max-height: $line-height*$overrideLines;
    -webkit-line-clamp: $overrideLines; /* number of lines to show */
    @if $setMinimumHeight != 0 {
      min-height: $line-height*$lines;
    }
  }
}
@mixin textOverflowEllipsis($width) {
  white-space: nowrap;
  width: $width;
  overflow: hidden;
  text-overflow: ellipsis;
}
@mixin mxTransition($value) {
  -webkit-transition: $value;
  -moz-transition: $value;
  -ms-transition: $value;
  -o-transition: $value;
  transition: $value;
}
@mixin mxTransform($value) {
  -webkit-transform: scale($value);
  -moz-transform: scale($value);
  -ms-transform: scale($value);
  -o-transform: scale($value);
  transform: scale($value);
}
//using flexbox and css order to switch the order of objects in the DOM
@mixin swapItems($toShowFist, $toShowLast) {
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  /* optional */
  -webkit-box-align: start;
  -moz-box-align: start;
  -ms-flex-align: start;
  -webkit-align-items: flex-start;
  align-items: flex-start;
  $flex-prefixes: -webkit-box -moz-box -ms-flexbox -webkit-flex flex;
  @each $flex-prefix in $flex-prefixes {
    display: $flex-prefix;
  }
  #{$toShowFist} {
    -webkit-box-ordinal-group: 1;
    -moz-box-ordinal-group: 1;
    -ms-flex-order: 1;
    -webkit-order: 1;
    order: 1;
  }
  #{$toShowLast} {
    -webkit-box-ordinal-group: 2;
    -moz-box-ordinal-group: 2;
    -ms-flex-order: 2;
    -webkit-order: 2;
    order: 2;
  }
}
@mixin user-select {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  /*user-select: none;*/
}
@mixin order($order) {
  -webkit-box-ordinal-group: $order;
  -moz-box-ordinal-group: $order;
  -ms-flex-order: $order;
  -webkit-order: $order;
  order: $order;
}
@mixin setForSwap {
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  /* optional */
  -webkit-box-align: start;
  -moz-box-align: start;
  -ms-flex-align: start;
  -webkit-align-items: flex-start;
  align-items: flex-start;
  $flex-prefixes: -webkit-box -moz-box -ms-flexbox -webkit-flex flex;
  @each $flex-prefix in $flex-prefixes {
    display: $flex-prefix;
  }
}
@mixin twoColorGradient($color1, $percent1, $color2, $percent2) {
  $backgrounds: -webkit-linear-gradient(top, $color1, $color1 $percent1, $whiteColor $percent2, $whiteColor)
  -o-linear-gradient(top, $color1, $color1 $percent1, $whiteColor $percent2, $whiteColor)
  -moz-linear-gradient(top, $color1, $color1 $percent1, $whiteColor $percent2, $whiteColor)
  linear-gradient(top, $color1, $color1 $percent1, $whiteColor $percent2, $whiteColor);
  @each $bg in $backgrounds {
    background: $bg;
  }
}
@mixin borderRadius($radius) {
  /*-moz-border-radius: $radius;
  -webkit-border-radius: $radius;
  -ms-border-radius: $radius;*/
  border-radius: $radius;
}
@mixin remSize($property, $values) {
  // Create a couple of empty lists as output buffers.
  $font-size-base: 16px; // should be consistent with your html/body font-size
  $px-values: ();
  $em-values: ();
  $rem-values: ();
  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $em-values: join($em-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $font-size-base;
      $new-em-value: $new-rem-value;
      $px-values: join($px-values, round($value));
      $em-values: join($em-values, #{$new-em-value}em);
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if $value == auto or $value == inherit {
      // auto or inherit - don't add px or rem - from comment under gist
      $px-values: join($px-values, $value);
      $em-values: join($em-values, $value);
      $rem-values: join($rem-values, $value);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size-base));
      $em-values: join($em-values, #{$value}em);
      $rem-values: join($rem-values, #{$value}rem);
    }
    $final-values: $px-values $em-values $rem-values;
  }
  // output the converted rules
  @each $final-value in $final-values {
    #{$property}: $final-values;
  }
}
@mixin cssColumns($n) {
  -webkit-column-count: $n; /* Chrome, Safari, Opera */
  -moz-column-count: $n; /* Firefox */
  column-count: $n;
}
@mixin cssColumns2($n,$gap,$width) {
  -webkit-column-gap: $gap; /* Chrome, Safari, Opera */
  -moz-column-gap: $gap; /* Firefox */
  column-gap: $gap;
  -webkit-columns: $width $n;
  -moz-columns: $width $n;
  columns: $width $n;
}
@mixin avoidColumnBreak {
  -webkit-column-break-inside: avoid; /* Chrome, Safari, Opera */
  page-break-inside: avoid; /* Firefox */
  break-inside: avoid; /* IE 10+ */
}
@mixin columnGap($n) {
  -webkit-column-gap: $n; /* Chrome, Safari, Opera */
  -moz-column-gap: $n; /* Firefox */
  column-gap: $n;
}
@mixin columnWidth($n) {
  -webkit-column-width: $n; /* Chrome, Safari, Opera */
  -moz-column-width: $n; /* Firefox */
  column-width: $n;
}
@mixin transitionFade($duration) {
  transition: opacity $duration ease-in-out;
  -moz-transition: opacity $duration ease-in-out;
  -webkit-transition: opacity $duration ease-in-out;
}
@mixin use-icomoon {
  font-family: "icomoon";
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
@mixin use-fontawsome($fontsize :0) {
  @if $fontsize == 0 {
    font: normal normal normal 14px FontAwesome;
  } @else {
    font: normal normal normal $fontsize FontAwesome;
  }
  line-height: 1;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
@mixin use-glyphicon {
  font-family: "Glyphicons Halflings";
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
////////megamenu-multi-level
/****************** BUTTONS **************************/
@mixin btn {
  height: 45px;
  color: $white;
  font-weight: 400;
  font-size: 1.125rem;
  border: none;
  border-radius: 0;
  padding-top: 12px;
  &:hover {
    color: $white;
  }
  &:focus {
    color: $white;
  }
}
/*
 * Linear gradient generator. 'start' is top, 'end' is bottom. IE9 support not included using CSS SVG include.
 *
 * Use http://www.colorzilla.com/gradient-editor/ to generate IE9 SVG element
 *
 */
@mixin gradientWithDirection($start, $end, $dir) {
  @if $dir  == "y" {
    $backgrounds: $start -moz-linear-gradient(top, $start 0%, $end 100%)
    -webkit-gradient(linear, left top, left bottom, color-stop(0%, $start), color-stop(100%, $end))
    -webkit-linear-gradient(top, $start 0%, $end 100%) -o-linear-gradient(top, $start 0%, $end 100%)
    -ms-linear-gradient(top, $start 0%, $end 100%) linear-gradient(to bottom, $start 0%, $end 100%);
    @each $bg in $backgrounds {
      background: $bg;
    }
  } @else {
    $backgrounds: $start -moz-linear-gradient(left, $start 0%, $end 100%)
    -webkit-gradient(linear, left, color-stop(0%, $start), color-stop(100%, $end))
    -webkit-linear-gradient(left, $start 0%, $end 100%) -o-linear-gradient(left, $start 0%, $end 100%)
    -ms-linear-gradient(top, $start 0%, $end 100%) linear-gradient(to right, $start 0%, $end 100%);
    @each $bg in $backgrounds {
      background: $bg;
    }
  }
}
@mixin behaveRow {
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}
@mixin numbers-aliged-center {
  -moz-font-feature-settings: "lnum" 1;
  -ms-font-feature-settings: "lnum" 1;
  -webkit-font-feature-settings: "lnum" 1;
  font-feature-settings: "lnum" 1;
}
@mixin line-height($font-size,$line-height) {
  line-height: $line-height / $font-size;
}
@mixin styled-scrollbar($trackColor,$trackPieceColor,$thumbColor,$scrollBarSize,$borderRadiuSize) {
  //more about styling scrollbar: https://css-tricks.com/custom-scrollbars-in-webkit/
  &::-webkit-scrollbar {
    -webkit-appearance: none;
    appearance: none;
    width: $scrollBarSize;
    height: $scrollBarSize;
  }
  //button on ending points
  &::-webkit-scrollbar-button {
    border-radius: $borderRadiuSize;
    -webkit-box-shadow: inset 0 0 12px $thumbColor;
    box-shadow: inset 0 0 12px $thumbColor;
  }
  &::-webkit-scrollbar-track {
    -webkit-box-shadow: inset 0 0 6px $trackColor;
    box-shadow: inset 0 0 6px $trackColor;
    border-radius: $borderRadiuSize;
  }
  &::-webkit-scrollbar-track-piece {
    background-color: $trackPieceColor;
  }
  &::-webkit-scrollbar-thumb {
    -webkit-box-shadow: inset 0 0 6px $thumbColor;
    box-shadow: inset 0 0 6px $thumbColor;
    border-radius: $borderRadiuSize;
  }
  //bottom right corner button
  &::-webkit-scrollbar-corner {
    border-radius: $borderRadiuSize;
    -webkit-box-shadow: inset 0 0 12px $thumbColor;
    box-shadow: inset 0 0 12px $thumbColor;
  }
  &::-webkit-resizer {
    border-radius: $borderRadiuSize;
  }
}
@mixin placeHolderTextColor($color) {
  &::-webkit-input-placeholder {
    color: $color;
  }
  &:-moz-placeholder {
    /* Firefox 18- */
    color: $color;
  }
  &::-moz-placeholder {
    /* Firefox 19+ */
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
}
@mixin color-opacity($property, $color, $opacity: 0.3) {
  // output the converted rules
  //#{$property}: $color; /* The Fallback */
  #{$property}: rgba($color, $opacity);
}
//to change color of scrollbar in IE
@mixin ieScrollBar {
  //http://www.spectrum-research.com/V2/projects_scrollbar_generator.asp
  color: black;
  background-color: $gray-light-3;
  scrollbar-face-color: $error;
  scrollbar-arrow-color: $white;
  scrollbar-track-color: $error;
  scrollbar-shadow-color: rgb(0, 0, 0);
  scrollbar-highlight-color: rgb(0, 0, 0);
  scrollbar-3dlight-color: $sg-secondary;
  scrollbar-darkshadow-Color: $sg-primary;
}

@mixin carousel-indicator-button($width: 100%, $height:100%){
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: block;
  margin: auto;
  padding: 0;
  border-radius: 50%;
  text-indent: 0;
  width: $width;
  height: $height;
}